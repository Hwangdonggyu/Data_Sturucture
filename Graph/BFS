#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
#define max_queue 100

//queue
typedef int data;
typedef struct {
    int front, rear;
    data items[max_queue];

}queue;

void initqueue(queue* pqueue);
bool isfull(queue* pqueue);
bool isempty(queue* pqueue);
data peek(queue* pqueue);
void enqueue(queue* pqueue, data item);
void dequeue(queue* pqueue);

//Graph
typedef struct _gnode{
    int id;
    struct _gnode* next;
}gnode;

typedef struct{
    int num;
    gnode** heads;
}graph;

void creategraph(graph* pgraph, int num);
void destroygraph(graph* pgraph);
void addedge(graph* pgraph, int src, int dest);
void printgraph(graph* pgraph);
void BFS(graph* pgraph);

int main(){
    graph g;
    creategraph(&g, 8);
    addedge(&g, 0, 1);
    addedge(&g, 0, 2);
    addedge(&g, 0, 7);
    addedge(&g, 1, 7);
    addedge(&g, 1, 3);
    addedge(&g, 1, 5);
    addedge(&g, 2, 6);
    addedge(&g, 2, 5);
    addedge(&g, 3, 7);
    addedge(&g, 3, 4);
    addedge(&g, 4, 7);
    addedge(&g, 6, 7);
    addedge(&g, 5, 7);

    BFS(&g);
    printf("\n");
    printgraph(&g);
    destroygraph(&g);

    return 0;
}

//queue
void initqueue(queue* pqueue){
    pqueue->front = pqueue-> rear = 0;
}
bool isfull(queue* pqueue){
    return pqueue->front == (pqueue->rear+1)%max_queue;
}
bool isempty(queue* pqueue){
    return pqueue->front == pqueue->rear;
}
data peek(queue* pqueue){
    if(isempty(pqueue)) exit(1);
    return pqueue->items[pqueue->front];
}
void enqueue(queue* pqueue, data item){
    if(isfull(pqueue)) exit(1);
    pqueue->items[pqueue->rear]= item;
    pqueue->rear = (pqueue->rear+1) % max_queue;
}
void dequeue(queue* pqueue){
    if(isempty(pqueue)) exit(1);
    pqueue->front = (pqueue->front+1)% max_queue;
}


//Graph
void creategraph(graph* pgraph, int num){
    pgraph->num = num;
    pgraph->heads = (gnode**)malloc(sizeof(gnode*)*num);
    for(int i = 0; i < num; i ++){
        pgraph->heads[i] = (gnode*)malloc(sizeof(gnode));
        pgraph->heads[i]->next = NULL;
    }
}
void destroygraph(graph* pgraph){
    for(int i = 0; i < pgraph->num; i++){
        gnode* cur = pgraph->heads[i];
        while(cur != NULL){
            gnode* temp = cur;
            cur = cur->next;
            free(temp);
        }
    }
    free(pgraph->heads);
}

void addedge(graph* pgraph, int src, int dest){
    gnode* newnode1, *newnode2, *cur;
    newnode1 = (gnode*)malloc(sizeof(gnode));
    newnode1->id = dest;
    newnode1->next = NULL;

    cur = pgraph->heads[src];
    while(cur -> next != NULL){
        cur = cur->next;
    }
    cur->next = newnode1;

    newnode2 = (gnode*)malloc(sizeof(gnode));
    newnode2->id = src;
    newnode2->next = NULL;

    cur = pgraph->heads[dest];
    while(cur->next != NULL){
        cur = cur->next;
    }
    cur->next = newnode2;
}

void printgraph(graph* pgraph){
    for(int i = 0; i < pgraph->num; i++){
        gnode* cur = pgraph->heads[i]->next;
        printf("Node %d: ", i);
        while(cur != NULL){
            printf("%d ", cur->id);
            cur = cur->next;
        }
        printf("\n");
    }
}

void BFS(graph* pgraph){
    queue pqueue;
    bool* visited = (bool*)malloc(sizeof(bool)*pgraph->num);
    for(int i = 0; i < pgraph->num; i++){
        visited[i] = false;
    }
    initqueue(&pqueue);
    enqueue(&pqueue, 0);
    while(!isempty(&pqueue)){
        gnode* cur;
        int vtx = peek(&pqueue);
        dequeue(&pqueue);
        
        if(visited[vtx]) continue;
        else{
            visited[vtx] = true;
            printf("%d ", vtx);
        }
        
        cur = pgraph->heads[vtx]->next;
        while(cur != NULL){
            if(!visited[cur->id]) enqueue(&pqueue, cur->id);
            cur = cur->next;
        }
    }
    
}
