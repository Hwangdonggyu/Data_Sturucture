#include <stdio.h>
#include <stdlib.h>

typedef struct _gnode{
    int id;
    struct _gnode* next;
}gnode;

typedef struct{
    int num;
    gnode** heads;
}graph;

void creategraph(graph* pgraph, int num);
void destroygraph(graph* pgraph);
void addedge(graph* pgraph, int src, int dest);
void printgraph(graph* pgraph);

int main(){
    graph g;
    creategraph(&g, 5);
    addedge(&g, 0, 1);
    addedge(&g, 0, 2);
    addedge(&g, 0, 4);
    addedge(&g, 1, 2);
    addedge(&g, 2, 3);
    addedge(&g, 2, 4);
    addedge(&g, 3, 4);
    
    printgraph(&g);
    destroygraph(&g);
    
    return 0;
}

void creategraph(graph* pgraph, int num){
    pgraph->num = num;
    pgraph->heads = (gnode**)malloc(sizeof(gnode*)*num);
    for(int i = 0; i < num; i ++){
        pgraph->heads[i] = (gnode*)malloc(sizeof(gnode));
        pgraph->heads[i]->next = NULL;
    }
}
void destroygraph(graph* pgraph){
    for(int i = 0; i < pgraph->num; i++){
        gnode* cur = pgraph->heads[i];
        while(cur != NULL){
            gnode* temp = cur;
            cur = cur->next;
            free(temp);
        }
    }
    free(pgraph->heads);
}

void addedge(graph* pgraph, int src, int dest){
    gnode* newnode1, *newnode2, *cur;
    newnode1 = (gnode*)malloc(sizeof(gnode));
    newnode1->id = dest;
    newnode1->next = NULL;
    
    cur = pgraph->heads[src];
    while(cur -> next != NULL){
        cur = cur->next;
    }
    cur->next = newnode1;
    
    newnode2 = (gnode*)malloc(sizeof(gnode));
    newnode2->id = src;
    newnode2->next = NULL;
    
    cur = pgraph->heads[dest];
    while(cur->next != NULL){
        cur = cur->next;
    }
    cur->next = newnode2;
}

void printgraph(graph* pgraph){
    for(int i = 0; i < pgraph->num; i++){
        gnode* cur = pgraph->heads[i]->next;
        printf("Node %d: ", i);
        while(cur != NULL){
            printf("%d ", cur->id);
            cur = cur->next;
        }
        printf("\n");
    }
}
