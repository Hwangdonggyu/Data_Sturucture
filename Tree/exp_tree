#include<stdio.h>
#include<stdlib.h>

typedef int data;
/*binary_tree*/
typedef struct _bt {
    data item;
    struct _bt* left_child;
    struct _bt* right_child;
}bt;

/*d_stack*/
typedef struct _node {
    bt* node;
    struct _node* next;
}node;
typedef struct {
    node* top;
}dstack;

void initstack(dstack* pstack) {
    pstack->top = NULL;
}
bool isempty(dstack* pstack) {
    return pstack->top == NULL;
}
bt* peek(dstack* pstack) {
    if (isempty(pstack)) exit(1);
    return pstack->top->node;
}
void push(dstack* pstack, bt* root) {
    node* newnode;
    newnode = (node*)malloc(sizeof(node));
    newnode->node = root;
    newnode->next = pstack->top;
    pstack->top = newnode;
}
void pop(dstack* pstack) {
    if (isempty(pstack)) exit(1);
    node* temp;
    temp = pstack->top;
    pstack->top = temp->next;
    free(temp);
}
/* binary_tree */
bt* createnode(data item) {
    bt* newnode = (bt*)malloc(sizeof(bt));
    newnode->item = item;
    newnode->left_child = NULL;
    newnode->right_child = NULL;
    return newnode;
}
void destroynode(bt* node) {
    free(node);
}
void createleftsubtree(bt* root, bt* left) {
    if (root->left_child != NULL) exit(1);
    root->left_child = left;
}
void createrightsubtree(bt* root, bt* right) {
    if (root->right_child != NULL) exit(1);
    root->right_child = right;
}

int caldirectorysize(bt* root);
int calculateexptree(bt* root);
bt* makeexptree(char* exp, int len);

void inorder(bt* root){
    if(root != NULL){
        inorder(root->left_child);
        printf("%c ", root->item);
        inorder(root->right_child);
    }
}

int main(){
    char exp[5] = {'3','5','2','*','+'};
    bt* a;
    a = makeexptree(exp, 5);
    inorder(a);
    
}

int caldirectorysize(bt* root){
    int left,right;
    if(root == NULL) return 0;
    else{
        left = caldirectorysize(root->left_child);
        right = caldirectorysize(root-> right_child);
        return(left + right + root->item);
    }
}

int calculateexptree(bt* root){
    int op1,op2;
    if(root == NULL) return 0;
    if(root->left_child==NULL && root ->right_child == NULL) return root->item;
    op1 = calculateexptree(root->left_child);
    op2 = calculateexptree(root->right_child);
    switch (root -> item) {
        case '+' : return op1+op2;
        case '-' : return op1-op2;
        case '*' : return op1*op2;
        case '/' : return op1/op2;
    }
    return 0;
}

bt* makeexptree(char* exp, int len){
    dstack stack;
    bt* node, *right_node, *left_node;
    initstack(&stack);
    for(int i =0;i<len;i++){
        if('0'<=exp[i]&&exp[i]<'9') node = createnode(exp[i]);
        else{
            right_node = peek(&stack);
            pop(&stack);
            left_node = peek(&stack);
            pop(&stack);
            node = createnode(exp[i]);
            createrightsubtree(node, right_node);
            createleftsubtree(node, left_node);
        }
        push(&stack,node);
    }
    return peek(&stack);
}
